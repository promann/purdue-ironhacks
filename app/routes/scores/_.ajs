<% include(Bloggify.partials.header, { title: "Scores" }) %>
<% include(Bloggify.partials.container.start) %>
<script>
    window._pageData = {
        component: "scores",
        user: <%- stringify(ctx.user) %>,
        hackers: <%- stringify(users) %>,
        calendar_values: <%- stringify(calendarValues) %>,
        csrfToken: <%- stringify(ctx.csrfToken) %>
    };
</script>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Slider css -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.0.0/css/bootstrap-slider.min.css" crossorigin="anonymous">

<script
      src="https://code.jquery.com/jquery-3.2.1.min.js"
      integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
      crossorigin="anonymous"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.0.0/bootstrap-slider.min.js"></script>


<div class="scoreLogicContainer">
  <div class="container-fluid">
    <div class="row">
    </div>
    <div class="row">
      <div class="col-md-3">
        <img src="" id="profilePicture">
      </div>
      <div class="col-md-7 col-md-offset-1">
        <div id="phasesDiv">
           <input  type="text"
          data-provide="slider"
          data-slider-ticks="[1, 2, 3, 4, 5]"
          data-slider-ticks-labels='["Phase 1", "Phase 2", "Phase 3", "Phase 4", "Phase 5"]'
          data-slider-min="1"
          data-slider-max="5"
          data-slider-step="1"
          data-slider-value="1"
          data-slider-tooltip="hide"
          data-slider-id="ex21"
          id="phasesSlider" />
        </div>
      </div>
      
    </div>
    <div class="row">
      <div class="col-md-3">
        <div id="app"></div>
      </div>
      <div class="col-md-9">
        <div class="row">
          <div class="col-md-6">
            <div>
              <button class="nav-button" id="personalScoreButton">INDIVIDUAL FEEDBACK</button>
              <button class="nav-button" id="generalScoreButton" >YOUR COMPETITORS</button>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div id="tableWrapper">
              <div id="tableScroll">
                <table id="generalTable">
                  <thead id="generalTableHead">
                    
                  </thead>
                  <tbody id="generalTableBody">
                      
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
      <div class="row">
        <div class="col-md-12" id="bottomText">
          
        </div>
    </div>
    </div>
</div>
</div>
<script> 

//Styling buttons

//Styling buttons

//Getting current user data
var currentUser =  <%- stringify(ctx.user.profile) %>

var generalData
var currentPhase = 1;
/*
  current mode:
  0 = general score
  1 = personal score
*/
var currentMode = 1;
var dimentionNames = ["Technology", "Functionality", "InfoVis", "Novelty"]
var dimentionDescription = ["Tech requirements: You are expected to meet all 10 technological requirements specified in the challenge description (www.ironhacks.com/task). All requirements are equally weighted. The more more requirements you meet the better", "Error rating: We evaluate the quality of your code by counting the errors and diving it by the total number of lines of code. The lower the value the better your code.", "System affordance: Does the application offer recognizable elements and interactions that can be understood by the user? ", "Adding new data sets definitely makes your app stand (take out the three letters) out from the rest. We evaluate how successfully you implement additional open datasets: How relevant are they for you're the application? How novel is the visualization of this data? We evaluate each dataset individually and average it across all datasets."]
var measureTypeDescription = ["Error rating", "Number of technology", "Number of user requirements met", "Usability point achieved"]

// API key from the Developer Console
var API_KEY = 'AIzaSyDzZog6BPwu__S1klBvsGwrtLME6U0oP7s';

//This is the generic function to populate the table when the general score mode is on.
//The phase attribute is a number from 1 to 5
//The mode attribute is or 0 or 1

function showPhaseScore(phase, mode){
  //Updating the global variables
  currentPhase = phase;
  currentMode = mode;
  //Highligth the pressed button
  // Declaring aux variables.
  var newRow, group_id, phase_id, hack_id, project, score, user_id;
  // Array of rows, we storage the rows cause we need to randomize before draw them.
  var tableRows = []
  // Getting the reference to the table 
  var tableBodyReference = document.getElementById("generalTableBody");
  var tableHeadReference = document.getElementById("generalTableHead");
  //cleaning the table on each iteration, we do this to "redraw" the same reference.
  tableHeadReference.innerHTML = ""
  tableBodyReference.innerHTML = ""
  
  // drawing stuff according with the treatment 
  // General score
  if(currentMode == 0){
    if (generalData.values.length > 0) {
      if(currentUser.hack_id == 0){
        //Show only personal score
        //Creating the headers
        //Title
        var titleRows = tableHeadReference.insertRow(0);
        var title = document.createElement('th');
        title.innerHTML = "  : ' ("
        title.colSpan = 1
        titleRows.appendChild(title)
      }else if(currentUser.hack_id == 1){
        //Showing only one column - projects
        //Creating the headers
        //Title
        var titleRows = tableHeadReference.insertRow(0);
        //columns names
        var comlumnsNameRow = tableHeadReference.insertRow(1);
        var hackerName = document.createElement('th'),
            projectLink = document.createElement('th');
        hackerName.innerHTML = "Name"   //TODO: This should be a constant.
        projectLink.innerHTML = "Project" //TODO: This should be a constant.
        comlumnsNameRow.appendChild(hackerName)
        comlumnsNameRow.appendChild(projectLink)
        //Iterating over the whole document, from the bottom to the top.
        for (i = generalData.values.length - 1; i >= 0; i--) {
          var row = generalData.values[i];
          //checking if they are from the same semestrer
          if(row[0] == currentUser.hack_type){
            //checking if they are from the same group_id
            if(row[1] == currentUser.group_id){
              //checking if they are from the same phase
              if(row[2] == phase){
                //Creating row data element:
                var rowData = {
                  project : "<a style='color:#F39D26' href='" + row[4] + "'>" + "<u>View</u></a>"
                }
                //Bold the current user name
                if(row[4] == currentUser.github_username){
                  rowData.background = 'lightGray';
                  rowData.user_id = "<b> Hacker " + row[11] + "</b";

                }else {
                  rowData.background = 'white';
                  rowData.user_id = "<b> Hacker " + row[11] + "</b";
                }
                // Saving row to ramdomize after.
                tableRows.push(rowData)
              }
            }
          }
        }
        //Randomizing the names:
        tableRows = shuffle(tableRows)
        //Filling the table
        for (var i = 0; i < tableRows.length; i++) {
          newRow = tableBodyReference.insertRow(tableBodyReference.rows.length);
          user_id = newRow.insertCell(0);
          project = newRow.insertCell(1);
          project.innerHTML = tableRows[i].project
          user_id.innerHTML = tableRows[i].user_id 
          newRow.style.background = tableRows[i].background
        }
      }else if(currentUser.hack_id == 2){
        //Showing two columns
        //Creating the headers
        //Title
        var titleRows = tableHeadReference.insertRow(0);
        var title = document.createElement('th');
        title.innerHTML = "General Score Table"
        title.colSpan = 3
        titleRows.appendChild(title)
        //columns names
        var comlumnsNameRow = tableHeadReference.insertRow(1);
        var hackerName = document.createElement('th'),
            projectLink = document.createElement('th'),
            score = document.createElement('th');
        hackerName.innerHTML = "Name"   //TODO: This should be a constant.
        projectLink.innerHTML = "Project" //TODO: This should be a constant.
        score.innerHTML = "Score"         //TODO: This should be a constant.
        comlumnsNameRow.appendChild(hackerName)
        comlumnsNameRow.appendChild(projectLink)
        comlumnsNameRow.appendChild(score)
        for (i = generalData.values.length - 1; i >= 0; i--) {
          var row = generalData.values[i];
          //checking if they are from the same semestrer

          if(row[0] == currentUser.hack_type){
            //checking if they are from the same group_id
            if(row[1] == currentUser.group_id){
              //checking if they are from the same phase
              if(row[2] == phase){
                //Creating row data element:
                var rowData = {
                  project : "<a style='color:#F39D26' href='" + row[5] + "'>" + "<u>View</u></a>",
                  score : row[6]
                }
                //Bold the current user name
                if(row[4] == currentUser.github_username){
                  rowData.background = 'lightGray';
                  rowData.user_id = "<b> Hacker " + row[11] + "</b";

                }else {
                  rowData.background = 'white';
                  rowData.user_id = "<b> Hacker " + row[11] + "</b";
                }
                // Saving row to ramdomize after.
                tableRows.push(rowData)
              }
            }
          }
        }
        //Randomizing the names:
        tableRows = shuffle(tableRows)

        //Filling the table
        for (var i = 0; i < tableRows.length; i++) {
          newRow = tableBodyReference.insertRow(tableBodyReference.rows.length);
          user_id = newRow.insertCell(0);
          project = newRow.insertCell(1);
          score = newRow.insertCell(2);
          project.innerHTML = tableRows[i].project;
          newRow.style.background = tableRows[i].background;
          user_id.innerHTML = tableRows[i].user_id;
          score.innerHTML = tableRows[i].score;
        }
      }
    }else{
      console.log("Empty table")
    }
  //Personal score
  }else if(currentMode == 1){
    //Creating the headers
    //Title
    var titleRows = tableHeadReference.insertRow(0);
    var title = document.createElement('th');
    title.innerHTML = "INDIVIDUAL FEEDBACK"
    title.style.color = "#F39D26"
    title.colSpan = 4
    titleRows.appendChild(title)
    //columns names'
    var comlumnsNameRow = tableHeadReference.insertRow(1);
    var dimensionName = document.createElement('th'),
        dimensionDescription = document.createElement('th'),
        measureType = document.createElement('th'),
        yourScore = document.createElement('th');
    dimensionName.innerHTML = "Perfomance Dimention"
    dimensionDescription.innerHTML = "Description"
    measureType.innerHTML = "Measure type"
    yourScore.innerHTML = "Your Result"
    comlumnsNameRow.appendChild(dimensionName)
    comlumnsNameRow.appendChild(dimensionDescription)
    comlumnsNameRow.appendChild(measureType)
    comlumnsNameRow.appendChild(yourScore)
    //Crering aditional aux variables:
    var dimention, dimentionDes, measureTypeDes;
    //Filling the table
    //Fetching the phase results
    for (i = generalData.values.length - 1; i >= 0; i--) {
      var row = generalData.values[i];
      //checking if they are from the same semestrer
      if(row[0] == currentUser.hack_type){
        //checking if they are from the same group_id
        if(row[1] == currentUser.group_id){
          //checking if they are from the same phase
          if(row[2] == phase){
            //checking if this is the current user
            if(row[4] == currentUser.github_username){
              //Iterating over each dimention
              for (var j = 0; j < 4; j++) {
                newRow = tableBodyReference.insertRow(tableBodyReference.rows.length);
                dimention = newRow.insertCell(0);
                dimentionDes = newRow.insertCell(1);
                measureTypeDes = newRow.insertCell(2);
                score = newRow.insertCell(3);
                dimention.innerHTML = "<b>" + dimentionNames[j] + "</b";
                dimention.style.color = "#F39D26"
                dimentionDes.innerHTML = dimentionDescription[j];
                measureTypeDes.innerHTML = measureTypeDescription[j];
                score.innerHTML = row[7 + j];
              }
            }
          }
        }
      }
    
    } 
  } 
}
function showGeneralScore(){
  var generalScoreButton = document.getElementById("generalScoreButton")
  var personalScoreButton = document.getElementById("personalScoreButton")
  generalScoreButton.style.background = '#F39D26'
  personalScoreButton.style.background = 'lightgray'
  showPhaseScore(currentPhase, 0)
}
function showPersonalScore(){
  var generalScoreButton = document.getElementById("generalScoreButton")
  var personalScoreButton = document.getElementById("personalScoreButton")
  generalScoreButton.style.background = 'lightgray'
  personalScoreButton.style.background = '#F39D26'
  showPhaseScore(currentPhase, 1)
}

//We use this function to randomize the hackers names on the general score table
function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

function getDataFromGoogle(){
  var data = $.get("https://sheets.googleapis.com/v4/spreadsheets/1xyAIRzFqiHpiZGtAI7QHR5DaycFupuQERc41y8Fu-eo/values/Sheet1!A1%3AM31?key=AIzaSyDzZog6BPwu__S1klBvsGwrtLME6U0oP7s", function() {
    
  })
    .done(function () {
      //enableButtons(data.responseJSON)
      var range = data.responseJSON;
      generalData = range;

      //DELETE THIS BEFORE GO PRODUCTION
      currentUser.hack_type = generalData.values[1][0]
      currentUser.group_id = "bogota"
      //DELETE THIS BEFORE GO PRODUCTION
      showPhaseScore(currentPhase, currentMode)
    })
    .fail(function (error) {
      //fail
      console.error(error);
    })
}

function initView(){
  //Hidding general score button
  if(currentUser.hack_id == 0){
    var generalScoreButton = document.getElementById('generalScoreButton')
    generalScoreButton.style.display = "none";
  }

  var profilePicture = document.getElementById('profilePicture')
  profilePicture.src = currentUser.picture
}


$(document).ready(function() {
  
  $("#generalScoreButton").on("click", showGeneralScore)
  $("#personalScoreButton").on("click", showPersonalScore)
  //Showing initial text
  initView();
  //Pulling the google API
  getDataFromGoogle();

  $("#ex21").on("change", function( event ){
    showPhaseScore(event.value.newValue, currentMode)
  })
})

</script>


<% include(Bloggify.partials.container.end) %>
<% include(Bloggify.partials.footer) %>
